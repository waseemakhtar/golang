package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

func main() {
	fmt.Println("Starting the application...")
	response, err := http.Get("https://httpbin.org/ip")
	if err != nil {
		fmt.Printf("The HTTP request failed with error %s\n", err)
	} else {
		data, _ := ioutil.ReadAll(response.Body)
		fmt.Println(string(data))
	}

	jsonData := map[string]string{"firstname": "Nic", "lastname": "Raboy"}
	jsonValue, _ := json.Marshal(jsonData)
	response, err = http.Post("https://httpbin.org/post", "application/json", bytes.NewBuffer(jsonValue))
	if err != nil {
		fmt.Printf("The HTTP request failed with error %s\n", err)
	} else {
		data, _ := ioutil.ReadAll(response.Body)
		fmt.Println(string(data))
	}

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// curl -X GET "https://httpbin.org/bearer" -H "accept: application/json" -H "Authorization: erg"

	// Note: Replace following URL with a valid restful endpoint
	req, err := http.NewRequest("GET", "https://git.example.com/api/v4/id/1024", nil)
	if err != nil {
		fmt.Printf("The CURL request failed with error %s\n", err)
	}
	// Note: Replace following bearer token with a valid token
	req.Header.Set("Authorization", "Bearer rkp-FOR-EXAMPLE-RFchhYRI")
	req.Header.Set("Accept", "*/*")

	var data []byte
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		fmt.Printf("The CURL respose failed with error %s\n", err)
	} else {
		fmt.Printf("The CURL respose:\n")
		data, _ = ioutil.ReadAll(resp.Body)
		fmt.Println(string(data))
		glUser := struct {
			LastActivityOn string `json:"last_activity_on"`
		}{}
		err = json.Unmarshal(data, &glUser)
		if err != nil {
			fmt.Println("error:", err)
		}
		fmt.Printf("%s\n", glUser.LastActivityOn)
	}
	defer resp.Body.Close()

	fmt.Println("Terminating the application...")
}
